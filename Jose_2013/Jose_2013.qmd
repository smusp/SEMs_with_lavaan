---
title: "Three-variable mediation with cross-sectional data"
highlight-style: solarized
code-block-border-left: "#FCC251"

format: 
  html: default
  gfm: default
---

```{css, echo = FALSE, purl = FALSE}
h1, h2, h3, h4 {
  color: #CB6015;
}
```

```{r echo = FALSE, eval = FALSE}


## Jose, P. (2013). Doing Statistical Mediation and Moderation. New York, NY: Guilford Press.
```

Jose, P. (2013). Doing Statistical Mediation and Moderation. 
New York, NY: Guilford Press.

This example shows how to obtain a three-variable mediation analysis using lavaan; including how to obtaining indirect and total effects. In Chapter 3 (Basic Mediation, pp. 43-92), Jose describes a basic mediation model involving three variables: Positive Life Events; Happiness; and Gratitude. Positive Life Events has a direct effect on Happiness, but also Positive Life Events has an indirect effect on Happiness via Gratitude.

<br />

#### Load relevant packages

First, load the lavaan and haven packages.

```{r echo = -2:-1, eval = FALSE}

## Load packages
library(lavaan)
library(haven)   # To read SPSS data files
```

<br />

#### Get the data

The data are available at the Guilford Press site (note that the url given on page 48 is not longer a valid link). The data are contained in an SPSS data file. The haven package allows R to read SPSS data files. Examine the file structure, in particular, noting the variable names. These will be needed by lavaan.

```{r echo = -2:-1, eval = FALSE}

## Get the data from Guilford Press web site
dataset <- data.frame(haven::read_spss("http://www.guilford.com/add/jose/mediation_example.sav"))

str(dataset)
head(dataset)
summary(dataset)
```

The labels for the three variables are:  

* ple - Positive Life Events 
* grat - Gratitude
* shs - Happiness 

<br />

#### The model
The model is given in Figure 3.3 (p. 46), reproduced below.

![](images/Mediation.svg){fig-align="left"}

Using lavaan, mediation effects can be estimated using the `:=` operator. In the diagram, the effects are labelled are a, b, and c$'$, in the model statement they are labelled a, b, and cpr.

```{r echo = -2:-1, eval = FALSE}

## The model from Figure 3.3
model <- "
  # direct effect
  shs ~ cpr * ple

  # mediator
  grat ~ a * ple
  shs ~  b * grat

  # indirect effect (a*b)
  indirect := a * b

  # total effect
  total := cpr + (a * b) 
"
```

<br />

#### Fit the model and get the results

I've requested unstandardised and standardised effects, and R^2^ values. For the standardised effects, see the "std.all" column in the output.

```{r echo = -2:-1, eval = FALSE}

## Fit the model and get the summary
fit <- sem(model, data = dataset)
summary(fit, rsquare = TRUE, standardized = TRUE)
```

Jose conducts mediation analysis using regressions. He presents the results of the regression analyses in a series of tables: 3.2 to 3.5 (pp. 49-52). The unstandardised and standardised coefficients in the tables agree with the lavaan output. 

In the regression summary tables, Jose presents the constant (that is, the intercept). If the intercepts are required, include `meanstructure = TRUE` in lavaan's `sem()` function.

```{r echo = -2:-1, eval = FALSE}

## To get the intercepts
fit_intercepts <- sem(model, data = dataset, meanstructure = TRUE)
summary(fit_intercepts, rsquare = TRUE, standardized = TRUE)
```

Jose shows how to calculate and test the statistical significance of Sobel's z-value (that is, testing the significance of the indirect effect) on pages 53 and 54. Do not rely on that test, similarly do not rely of the t-test for the indirect effect given in the lavaan output. It is better to calculate confidence intervals, although the symmetric confidence intervals presented in Table 3.7 (p. 55) are no better than the test for Sobel's z-value. The asymmetric CIs presented in Table 3.8 (p. 56) are possibly better. In lavaan, bootstrap CIs can be calculated.

```{r echo = -2:-1, eval = FALSE}

## To get the bootstrap CIs
fit_boot <- sem(model, data = dataset, se = "bootstrap", bootstrap = 2000)
summary(fit_boot, standardized = TRUE, ci = TRUE)
parameterEstimates(fit_boot, boot.ci.type = "perc")
```


```{r, echo = FALSE, include = FALSE, eval = TRUE, purl = FALSE}
input <- knitr::current_input()
output <- "mediation.r"
knitr::purl(input, output, documentation = 0, quiet = TRUE)
```

The R script with minimal commenting is available in [`{r} noquote(output)`](`{r} noquote(output)`). 